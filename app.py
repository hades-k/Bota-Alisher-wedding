import streamlit as st
import pandas as pd
import base64
import datetime
import gspread
from google.oauth2.service_account import Credentials

# --- Page Configuration ---
st.set_page_config(
    page_title="–ë–æ—Ç–∞ & –ê–ª–∏—à–µ—Ä",
    page_icon="üíç",
    layout="centered"
)

# --- Google Sheets Connection ---
# Function to create a gspread client from Streamlit secrets
def get_gspread_client():
    creds_dict = {
        "type": st.secrets["type"],
        "project_id": st.secrets["project_id"],
        "private_key_id": st.secrets["private_key_id"],
        "private_key": st.secrets["private_key"],
        "client_email": st.secrets["client_email"],
        "client_id": st.secrets["client_id"],
        "auth_uri": st.secrets["auth_uri"],
        "token_uri": st.secrets["token_uri"],
        "auth_provider_x509_cert_url": st.secrets["auth_provider_x509_cert_url"],
        "client_x509_cert_url": st.secrets["client_x509_cert_url"],
    }
    credentials = Credentials.from_service_account_info(
        creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets"],
    )
    return gspread.authorize(credentials)

# Function to verify the code and get guest data
def verify_code(code):
    try:
        client = get_gspread_client()
        spreadsheet = client.open_by_url(st.secrets["gcp_spreadsheet_url"])
        sheet = spreadsheet.worksheet("guests")

        cell = sheet.find(code)
        if cell:
            row_values = sheet.row_values(cell.row)
            guest_data = {
                "row_index": cell.row,
                "code": row_values[0],
                "name": row_values[1],
                "status": row_values[2],
                "guest_count": int(row_values[3]) if len(row_values) > 3 and row_values[3].isdigit() else 0,
            }
            return guest_data
        else:
            return None
    except gspread.exceptions.SpreadsheetNotFound:
        st.error("Spreadsheet not found. Check the URL in your secrets.")
        return None
    except Exception as e:
        st.error(f"An error occurred while accessing the spreadsheet: {e}")
        return None

# --- Function to get base64 encoded image for CSS ---
def get_base64_of_bin_file(bin_file):
    try:
        with open(bin_file, 'rb') as f:
            data = f.read()
        return base64.b64encode(data).decode()
    except FileNotFoundError:
        return None

# --- Load Custom CSS for Star Wars Theme ---
def load_css():
    encoded_image = get_base64_of_bin_file("background-1.png")
    st.markdown(f"""
    <style>

        @import url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');

    /* Background and layout */
    .stApp {{
        background-image: url("data:image/png;base64,{encoded_image}");
        background-repeat: no-repeat;
        background-size: cover;
        background-position: center center;
        background-attachment: scroll;
        font-family: 'Inter', sans-serif;
        text-align: center;
        position: relative;
        overflow-x: hidden;
    }}

    .stApp > * {{
        position: relative;
        z-index: 1;
    }}

    .stApp > header {{
        background-color: transparent;
    }}

    /* Typography */
    h1 {{
        color: #FFD700 !important;
        text-shadow: 0 0 8px #000, 0 0 16px #000;
        font-weight: 800;
        font-size: 2.2em;
        margin-top: 24px;
        letter-spacing: 0.04em;
        font-family: 'Russo One', sans-serif !important;
    }}

    h2 {{
        color: #FFD700 !important;
        text-shadow: 0 0 5px #000, 0 0 10px #000;
        font-weight: 500;
        font-size: 1.6em;
        font-family: 'Russo One', sans-serif !important;
    }}

    h3, label, .st-emotion-cache-16txtl3 {{
        color: #FFD700 !important;
        text-shadow: 0 0 5px #000, 0 0 10px #000;
        font-size: 1.4em !important;
        font-family: 'Russo One', sans-serif !important;
    }}

    /* Markdown text */
    .main .block-container p {{
        color: #FFD700;
        text-shadow: 0 0 5px #000, 0 0 10px #000;
        font-size: 1.2em;
    }}

    p {{
        color: #FFD700;
        font-size: 1.15em !important;
    }}

    /* Buttons */
    .stButton>button {{
        border: 2px solid #FFD700;
        background-color: #FFD700;
        color: #000;
        padding: 12px 24px;
        border-radius: 6px;
        font-weight: bold;
        text-transform: uppercase;
        transition: all 0.3s ease;
        width: 100%;
        box-shadow: 0 0 10px #FFD700;
    }}

    .stButton>button:hover {{
        background-color: #000;
        color: #FFD700;
        box-shadow: 0 0 20px #FFD700;
    }}

    /* Centering Streamlit info blocks */
    .st-emotion-cache-1c7y2kd {{
        text-align: center;
    }}

    /* Radio button labels */
    .stRadio label {{
        color: #FFD700 !important;
        font-weight: bold;
        text-shadow: 0 0 4px #000;
    }}

    /* Input fields */
    .stTextInput>div>div>input {{
        background-color: rgba(255, 255, 255, 0.05);
        color: #FFD700;
        border: 1px solid #FFD700;
        border-radius: 5px;
        text-align: center;
        font-size: 1.5em;
    }}

    .stTextInput>div>div>input::placeholder {{
        color: #ccc;
    }}

    .glow-block {{
    width: 100%;
    max-width: 720px;
    margin: 18px auto;
    background: rgba(0,0,0,0.4);
    border-radius: 18px;
    box-shadow: 0 0 18px 7px #FFD70099, 0 0 0 4px #FFD70044;
    padding: 12px 25px;
    border: 2px solid #FFD700;
    text-align: center;
    box-sizing: border-box;
    }}

    .glow-block h1, .glow-block names, .glow-block p {{
        color: #FFD700 !important;
        text-shadow: none !important;
        font-family: 'Russo One', sans-serif !important;
        margin: 0 0 8px 0;
    }}

    .stCheckbox > div > label {{
    color: #FFD700 !important;
    text-shadow: 1px 1px 2px #000 !important;
    font-size: 1.1em;
    font-weight: 500;
    }}

    </style>
    """, unsafe_allow_html=True)



# --- Language Content ---
content = {
    "ru": {
        "title": "Two hearts. One galaxy. Infinite adventures.",
        'subtitle': '–ù–∞—à —Å–µ–º–µ–π–Ω—ã–π –∞–ª—å—è–Ω—Å —Ä–∞–¥ —Å–æ–æ–±—â–∏—Ç—å:',
        'intro1': '–í –≥–∞–ª–∞–∫—Ç–∏–∫–µ, –Ω–µ —Ç–∞–∫–æ–π —É–∂ –¥–∞–ª—ë–∫–æ–π,',
        'intro2': '—Å–∫–æ—Ä–æ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –∑–≤—ë–∑–¥–Ω—ã—Ö —Å–∏—Å—Ç–µ–º -',
        'intro3': '–Ω–∞—à–µ–π –¥–æ—á–µ—Ä–∏',
        'bo': '–ë–æ—Ç–∞–≥–æ–∑',
        'intro4': '–∏ –µ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ',
        'ali': '–ê–ª–∏—à–µ—Ä–∞',
        'address_intro': 'üåå –ó–≤–µ–∑–¥–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Å—Ç—Ä–µ—á–∏:',
        'address': "üìç–†–µ—Å—Ç–æ—Ä–∞–Ω Portofino, –ê—Å—Ç–∞–Ω–∞. –ü—Ä–æ—Å–ø–µ–∫—Ç –¢—É—Ä–∞–Ω, 27",
        'dresscode_intro': 'üëó –î—Ä–µ—Å—Å-–∫–æ–¥:',
        'dresscode': '–í–µ—á–µ—Ä–Ω–∏–π —Å—Ç–∏–ª—å —Å –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏',
        'invite': '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é —ç—Ç–æ–≥–æ –º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.',
        'final_message': '–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å –≤–∞–º–∏ –ª—é–±–æ–≤—å. –ò —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.',
        'farewell': '–° –Ω–µ—Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∂–¥—ë–º –≤—Å—Ç—Ä–µ—á–∏,',
        'farewell_names': '–ù—É—Ä–ª–∞–Ω - –°–∞—É–ª–µ',
        'date': "6 —Å–µ–Ω—Ç—è–±—Ä—è 2025 –≥–æ–¥–∞",
        'time': '17:00',
        'time_intro': 'üïî –í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è',
        "rsvp_intro": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ",
        "submit_button": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç",
        "thank_you": "–°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω –≤ –≥–æ–ª–æ–∫—Ä–æ–Ω.",
        "countdown_text": "‚è≥–î–æ –Ω–∞—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å:",
        'countdown_2':'‚ú®‚ú®‚ú®',
        "days": "–¥–Ω–µ–π",
        "hours": "—á–∞—Å–æ–≤",
        "minutes": "–º–∏–Ω—É—Ç",
        "wedding_started": "–ü—Ä–∞–∑–¥–Ω–∏–∫ –Ω–∞—á–∞–ª—Å—è!",
        "rsvp_question": "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ?",
        "rsvp_yes_1": "–î–∞, —è –ø—Ä–∏–¥—É –æ–¥–∏–Ω(–∞)",
        "rsvp_yes_2": "–î–∞, –º—ã –ø—Ä–∏–¥–µ–º –≤–¥–≤–æ–µ–º",
        "rsvp_no": "–ù–µ—Ç, —è –Ω–µ —Å–º–æ–≥—É –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å",
    },

    "kz": {
        "title": "Two hearts. One galaxy. Infinite adventures.",
        'subtitle': '–ë—ñ–∑–¥—ñ“£ –æ—Ç–±–∞—Å—ã–ª—ã“õ –æ–¥–∞“õ “õ—É–∞–Ω–∞ —Ö–∞–±–∞—Ä–ª–∞–π–¥—ã:',
        'intro1': '–ê–ª—ã—Å –µ–º–µ—Å –±—ñ—Ä –≥–∞–ª–∞–∫—Ç–∏–∫–∞–¥–∞',
        'intro2': '–∂“±–ª–¥—ã–∑–¥—ã –µ–∫—ñ –∂“Ø–π–µ–Ω—ñ“£ “õ–æ—Å—ã–ª—É—ã –æ—Ä—ã–Ω –∞–ª–º–∞“õ -',
        'intro3': '“õ—ã–∑—ã–º—ã–∑',
        'bo': '–ë–æ—Ç–∞–≥”©–∑',
        'intro4': '–∂”ô–Ω–µ –æ–Ω—ã“£ —Ç–∞“£–¥–∞“ì–∞–Ω—ã',
        'ali': '”ò–ª—ñ—à–µ—Ä',
        'address_intro': 'üåå –ñ“±–ª–¥—ã–∑–¥—ã –∫–µ–∑–¥–µ—Å—É –æ—Ä—ã–Ω—ã:',
        'address': "üìç–ê—Å—Ç–∞–Ω–∞ “õ–∞–ª–∞—Å—ã, –¢“±—Ä–∞–Ω –¥–∞“£“ì—ã–ª—ã 27, ¬´Portofino¬ª –º–µ–π—Ä–∞–º—Ö–∞–Ω–∞—Å—ã",
        'dresscode_intro': 'üëó –î—Ä–µ—Å—Å-–∫–æ–¥:',
        'dresscode': '“í–∞—Ä—ã—à—Ç—ã“õ –µ–∫–ø—ñ–Ω–¥–µ—Ä—ñ –±–∞—Ä –∫–µ—à–∫—ñ —Å—Ç–∏–ª—å',
        'invite': '–°—ñ–∑–¥—ñ –æ—Å—ã –≥–∞–ª–∞–∫—Ç–∞—Ä–∞–ª—ã“õ –æ“õ–∏“ì–∞–Ω—ã“£ –±—ñ—Ä –±”©–ª—ñ–≥—ñ –±–æ–ª—É“ì–∞ —à–∞“õ—ã—Ä–∞–º—ã–∑.',
        'final_message': '–°“Ø–π—ñ—Å–ø–µ–Ω—à—ñ–ª—ñ–∫ –ø–µ–Ω –∫”©—Ç–µ—Ä—ñ“£–∫—ñ –∫”©“£—ñ–ª —Å—ñ–∑–±–µ–Ω –±—ñ—Ä–≥–µ –±–æ–ª—Å—ã–Ω.',
        'farewell': '–ö–µ–∑–¥–µ—Å–∫–µ–Ω—à–µ –∞—Å—ã“ì–∞ –∫“Ø—Ç–µ–º—ñ–∑,',
        'farewell_names': '–ù“±—Ä–ª–∞–Ω - –°”ô—É–ª–µ',
        'date': "2025 –∂. 6 “õ—ã—Ä–∫“Ø–π–µ–∫",
        'time': '—Å–∞“ì–∞—Ç 17:00',
        'time_intro': 'üïî –ö–µ–ª—É —É–∞“õ—ã—Ç—ã:',
        "rsvp_intro": "“ö–∞—Ç—ã—Å—É—ã“£—ã–∑–¥—ã —Ä–∞—Å—Ç–∞“£—ã–∑",
        "submit_button": "–ñ–∞—É–∞–ø—Ç—ã –∂—ñ–±–µ—Ä—É",
        "thank_you": "–†–∞—Ö–º–µ—Ç! –°—ñ–∑–¥—ñ“£ –∂–∞—É–∞–±—ã“£—ã–∑ –≥–æ–ª–æ–∫—Ä–æ–Ω“ì–∞ –∂–∞–∑—ã–ª–¥—ã.",
        "countdown_text": "‚è≥–¢–æ–π—ã–º—ã–∑“ì–∞",
        'countdown_2': '“õ–∞–ª–¥—ã',
        "days": "–∫“Ø–Ω",
        "hours": "—Å–∞“ì–∞—Ç",
        "minutes": "–º–∏–Ω—É—Ç",
        "wedding_started": "–ú–µ—Ä–µ–∫–µ –±–∞—Å—Ç–∞–ª–¥—ã!",
        "rsvp_question": "“õ–∞—Ç—ã—Å–∞—Ç—ã–Ω—ã“£—ã–∑–¥—ã —Ä–∞—Å—Ç–∞–π—Å—ã–∑ –±–∞?",
        "rsvp_yes_1": "–ò”ô, –º–µ–Ω –∂–∞–ª“ì—ã–∑ –∫–µ–ª–µ–º—ñ–Ω",
        "rsvp_yes_2": "–ò”ô, –±—ñ–∑ –µ–∫–µ—É–º—ñ–∑ –∫–µ–ª–µ–º—ñ–∑",
        "rsvp_no": "–ñ–æ“õ, –∫–µ–ª–µ –∞–ª–º–∞–π–º—ã–Ω"
    }
}

# --- Landing Page Logic ---
def show_landing_page():
    encoded_bg = get_base64_of_bin_file("background-1.png")
    st.markdown(f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Russo+One&display=swap');
    .landing-bg {{
        position: fixed;
        top: 0; left: 0; width: 100vw; height: 100vh;
        background-image: url('data:image/png;base64,{encoded_bg}');
        background-size: cover;
        background-position: center;
        z-index: 0;
    }}
    .top-landing-content {{
        position: relative;
        z-index: 2;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        width: 100%;
        max-width: 600px;
        margin: 2.5em auto 0 auto;
        box-sizing: border-box;
        padding: 0 1.5em;
    }}
    .landing-title {{
        font-family: 'Russo One', sans-serif;
        color: #FFD700;
        font-size: 3em;
        text-shadow: 0 2px 16px #000, 0 0 8px #FFD700;
        letter-spacing: 0.08em;
        margin-bottom: 1.2em;
        text-align: center;
        word-break: break-word;
        line-height: 1.1;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
    }}
    .landing-instructions {{
        font-family: 'Russo One', sans-serif;
        color: #FFD700;
        font-size: 1.3em;
        text-shadow: 0 2px 8px #000, 0 0 4px #FFD700;
        margin-bottom: 2em;
        text-align: center;
        word-break: break-word;
        line-height: 1.2;
        width: 100%;
        max-width: 100%;
        box-sizing: border-box;
    }}
    .landing-form-wrapper {{
        width: 100%;
        max-width: 340px;
        margin: 0 auto;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-sizing: border-box;
    }}
    .stTextInput>div>div>input {{
        text-align: center;
        font-size: 2em;
        letter-spacing: 0.3em;
        background: rgba(255,255,255,0.85);
        border-radius: 8px;
        border: 2px solid #FFD700;
        color: #000;
        font-weight: bold;
        font-family: 'Russo One', sans-serif;
        width: 100%;
        box-sizing: border-box;
    }}
    .stTextInput>div>div>input::placeholder {{
        color: #FFD700;
        opacity: 0.7;
        font-family: 'Russo One', sans-serif;
    }}
    .stButton>button {{
        width: 100%;
        font-size: 1.3em;
        margin-top: 1.2em;
        background: #FFD700;
        color: #000;
        border: 2px solid #FFD700;
        border-radius: 6px;
        font-weight: bold;
        box-shadow: 0 0 10px #FFD700;
        transition: all 0.2s;
        font-family: 'Russo One', sans-serif;
        box-sizing: border-box;
    }}
    .stButton>button:hover {{
        background: #000;
        color: #FFD700;
        box-shadow: 0 0 20px #FFD700;
    }}
    </style>
    <div class="landing-bg"></div>
    <div class="top-landing-content">
        <div class="landing-title">Qyz Uzatu. Botagoz</div>
        <div class="landing-instructions">
            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥<br>–°—ñ–∑–¥—ñ“£ 4 —Ç–∞“£–±–∞–ª—ã –∫–æ–¥—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑
        </div>
        <div class="landing-form-wrapper">
    """, unsafe_allow_html=True)

    with st.form("login_form"):
        code = st.text_input(
            "",
            max_chars=4,
            key="code_input",
            placeholder="****"
        )
        submitted = st.form_submit_button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å / –ñ–∞–ª“ì–∞—Å—Ç—ã—Ä—É")

        if submitted:
            if code and code.isdigit() and len(code) == 4:
                guest_data = verify_code(code)
                if guest_data:
                    st.session_state.landing_done = True
                    st.session_state.guest_info = guest_data
                    st.rerun()
                else:
                    st.error("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω / –ö–æ–¥ —Ç–∞–±—ã–ª–º–∞–¥—ã")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ / 4 —Ç–∞“£–±–∞–ª—ã –∫–æ–¥—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑")
    st.markdown("</div></div>", unsafe_allow_html=True)


# --- Main App Routing ---
if "landing_done" not in st.session_state:
    st.session_state.landing_done = False
if "guest_info" not in st.session_state:
    st.session_state.guest_info = None

if not st.session_state.landing_done or not st.session_state.guest_info:
    show_landing_page()
    st.stop()

# --- Main App Logic ---
load_css()

wedding_date = datetime.datetime(2025, 9, 6, 17, 0)

def get_countdown(wedding_date, lang_content):
    now = datetime.datetime.now()
    time_left = wedding_date - now

    if time_left.total_seconds() < 0:
        return lang_content["wedding_started"]
    else:
        days = time_left.days
        hours = time_left.seconds // 3600
        minutes = (time_left.seconds % 3600) // 60
        seconds = time_left.seconds % 60
        return f"{days} {lang_content['days']}, {hours} {lang_content['hours']}, {minutes} {lang_content['minutes']}"

# Language Selection
lang_choice = st.sidebar.radio("Language / –¢—ñ–ª", ["–†—É—Å—Å–∫–∏–π", "“ö–∞–∑–∞“õ"], label_visibility="collapsed")
lang = "ru" if lang_choice == "–†—É—Å—Å–∫–∏–π" else "kz"

t = content[lang]

# --- Display Invitation Details ---

st.markdown(f'<h1>{t["title"]}</h1>', unsafe_allow_html=True)

st.markdown(f""" <div class='glow-block'>
    <p> {t['intro1']} </p>
    <p> {t['intro2']} </p>
    <h2> {t['intro3']} <span style="color:white"> {t['bo']} </span> {t['intro4']} <span style="color:white"> {t['ali']} </span> </h2>
</div>""", unsafe_allow_html=True)

st.markdown(f""" <div class='glow-block'>
    <p>{t['address_intro']}</p>
    <p>{t['address']}</p>
    <br>
    <p>{t['time_intro']}</p>
    <p>{t['date']} | {t['time']}</p>
    <br>
    <p>{t['dresscode_intro']}</p>
    <p>{t['dresscode']}</p>
</div>""", unsafe_allow_html=True)

st.write("")  # Spacer

# --- Function to update RSVP in Google Sheet ---
def update_rsvp(row_index, status, guest_count):
    try:
        client = get_gspread_client()
        spreadsheet = client.open_by_url(st.secrets["gcp_spreadsheet_url"])
        sheet = spreadsheet.worksheet("guests")

        # gspread columns are 1-indexed. Update STATUS in col 3, GUEST_COUNT in col 4.
        sheet.update_cell(row_index, 3, status)
        sheet.update_cell(row_index, 4, str(guest_count))

        # Update session state to reflect the change immediately
        st.session_state.guest_info['status'] = status
        st.session_state.guest_info['guest_count'] = guest_count
        return True
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

# --- RSVP Form ---
st.header(t["rsvp_intro"])

guest_info = st.session_state.guest_info

# Check if the guest has already responded
if guest_info and guest_info['status'] in ['Yes', 'No']:
    st.success(t["thank_you"])
else:
    # Personalize the question for the logged-in guest
    rsvp_question = f"{guest_info['name']}, {t['rsvp_question'][0].lower()}{t['rsvp_question'][1:]}"

    with st.form(key="rsvp_form"):
        attendance = st.radio(
            label=rsvp_question,
            options=[t['rsvp_yes_1'], t['rsvp_yes_2'], t['rsvp_no']],
            index=None,
            key="attendance_radio")
        submitted = st.form_submit_button(label=t["submit_button"])
        if submitted:
            if attendance is not None:
                new_status = ""
                new_guest_count = 0
                if attendance == t['rsvp_yes_1']:
                    new_status = "Yes"
                    new_guest_count = 1
                elif attendance == t['rsvp_yes_2']:
                    new_status = "Yes"
                    new_guest_count = 2
                elif attendance == t['rsvp_no']:
                    new_status = "No"
                    new_guest_count = 0

                if update_rsvp(guest_info['row_index'], new_status, new_guest_count):
                    st.rerun()
                else:
                    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ / –û–ø—Ü–∏—è–ª–∞—Ä–¥—ã“£ –±—ñ—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑")



st.write("")

st.markdown(f""" <div class='glow-block'>
    <h3>{t['countdown_text']}</h3>
    <h3>{get_countdown(wedding_date, t)}</h3>
    <h3>{t['countdown_2']}</h3>
</div> """, unsafe_allow_html=True)

st.markdown(f""" <div class='glow-block'>
    <h3>{t['final_message']}
    <h3>{t['farewell']}</h3>
    <h2> <span style="color:white"> {t['farewell_names']} </span> </h2>
</div> """, unsafe_allow_html=True)
